--------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  <unnamed>
       log:  C:\Users\Harris\projects\asmhi_programming\analysis/do/assignment_stata.log
  log type:  text
 opened on:   6 Oct 2021, 21:43:48

. 
. // 1 The Titanic Analysis
. 
. // 1.1. First, import the titanic spend.xlsx data.
. 
. 
. import excel "data/source/titanic_spend.xlsx", firstrow
(5 vars, 3,628 obs)

. 
. // 1.2. In the next question we will want to merge this dataset with titanic main.dta which is in wide format, reshape your loaded dataset in order to
>  make a 1:1 merge possible. 
. // Hint: you should end up with four daily spend variables, one for each day.
. reshape wide daily_spend, i(id) j(day)
(j = 1 2 3 4)

Data                               Long   ->   Wide
-----------------------------------------------------------------------------
Number of observations            3,628   ->   907         
Number of variables                   5   ->   7           
j variable (4 values)               day   ->   (dropped)
xij variables:
                            daily_spend   ->   daily_spend1 daily_spend2 ... daily_spend4
-----------------------------------------------------------------------------

. 
. // 1.3. Merge this data with titanic main.dta and drop any non-merged data
. merge 1:1 id using "data/source/titanic_main.dta", keep(match) nogenerate

    Result                      Number of obs
    -----------------------------------------
    Not matched                             0
    Matched                               887  
    -----------------------------------------

. 
. // 1.4. Generate a new variable called fare_round which will round the fare to the nearest penny and label this variable
. generate fare_round = round(fare, 0.01)

. label variable fare_round "fare rounded to the nearest penny"

. 
. // 1.5. Create a new variable called date_purchased2 which is date_purchased as a numerical date (i.e. number of days since 01Jan1960). Format this to
>  be displayed as 01Jan1960.
. generate date_purchased2 = date(date_purchased, "DMY")

. 
. 
. 
. *! Interpretations!!!!
. 
. // 1.6. Calculate the mean and SD of age at launch by if they survived or not*.
. tabstat age, by(survived) statistics(mean sd)

Summary for variables: age
Group variable: survived (Survived, yes or no)

survived |      Mean        SD
---------+--------------------
       0 |  30.62485  13.90757
       1 |  28.91371  14.43724
---------+--------------------
   Total |  29.96508  14.13064
------------------------------

. 
. // 1.7. Use the tabulate command in order to compare percentage of those survived by class *.
. tabulate survived class, cell

+-----------------+
| Key             |
|-----------------|
|    frequency    |
| cell percentage |
+-----------------+

 Survived, |         Class of ticket
 yes or no |         1          2          3 |     Total
-----------+---------------------------------+----------
         0 |        80         97        368 |       545 
           |      9.02      10.94      41.49 |     61.44 
-----------+---------------------------------+----------
         1 |       136         87        119 |       342 
           |     15.33       9.81      13.42 |     38.56 
-----------+---------------------------------+----------
     Total |       216        184        487 |       887 
           |     24.35      20.74      54.90 |    100.00 

. 
. // 1.8. Calculate the minimum, maximum, inter quartile range (IQR) and median fare by class *.
. tabstat fare, by(class) statistics(min max iqr median)

Summary for variables: fare
Group variable: class (Class of ticket)

   class |       Min       Max       IQR       p50
---------+----------------------------------------
       1 |         0  512.3292   62.6521   60.2875
       2 |         0      73.5        13     14.25
       3 |         0     69.55      7.75      8.05
---------+----------------------------------------
   Total |         0  512.3292     23.35   14.4542
--------------------------------------------------

. 
. 
. 
. 
. 
. // 1.9. Generate a variable which contains the row mean for the daily_spend variables.
. local daily_spends daily_spend1 daily_spend2 daily_spend3 daily_spend4

. egen spends_mean = rowmean(`daily_spends')

. label variable spends_mean "mean daily spends"

. 
. // 1.10. Use a loop to replace any missing values in the daily spend variables with the row mean.
. foreach v of local daily_spends {
  2.         replace `v' = spends_mean if `v' == .
  3. }
(45 real changes made)
(42 real changes made)
(42 real changes made)
(35 real changes made)

. browse `daily_spends' spends_mean

. describe `daily_spends' spends_mean

Variable      Storage   Display    Value
    name         type    format    label      Variable label
--------------------------------------------------------------------------------------------------------------------------------------------------------
daily_spend1    double  %10.0g                1 daily_spend
daily_spend2    double  %10.0g                2 daily_spend
daily_spend3    double  %10.0g                3 daily_spend
daily_spend4    double  %10.0g                4 daily_spend
spends_mean     float   %9.0g                 mean daily spends

. 
. /*
> 
> // 1.11. Generate a variable indicating the number of people per cabin.
> 
> // 1.12. Produce a scatter graph for daily_spend against age for each day. Include a line-of-best-fit for each day. Add a title. Remove the legend. Ma
> ke sure you save each graph.
> 
> 

end of do-file

. exit, clear
